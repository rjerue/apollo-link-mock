{"version":3,"file":"apollo-link-mock.esm.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  Operation,\n  GraphQLRequest,\n  ApolloLink,\n  FetchResult,\n  Observable,\n  // Observer,\n} from 'apollo-link';\n\nimport { print } from 'graphql/language/printer';\nimport { addTypenameToDocument } from 'apollo-utilities';\nconst isEqual = require('lodash.isequal');\n\nexport interface MockedResponse {\n  request: GraphQLRequest;\n  result?: FetchResult;\n  error?: Error;\n  delay?: number;\n  newData?: () => FetchResult;\n  keep?: boolean;\n}\n\nexport interface MockedSubscriptionResult {\n  result?: FetchResult;\n  error?: Error;\n  delay?: number;\n}\n\nexport interface MockedSubscription {\n  request: GraphQLRequest;\n}\n\nexport class MockLink extends ApolloLink {\n  public addTypename: Boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse>,\n    addTypename: Boolean = true\n  ) {\n    super();\n    this.addTypename = addTypename;\n    if (mockedResponses)\n      mockedResponses.forEach(mockedResponse => {\n        this.addMockedResponse(mockedResponse);\n      });\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const key = requestToKey(mockedResponse.request, this.addTypename);\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(mockedResponse);\n  }\n\n  public request(operation: Operation) {\n    const key = requestToKey(operation, this.addTypename);\n    let responseIndex;\n    const response = (this.mockedResponsesByKey[key] || []).find(\n      (res, index) => {\n        const requestVariables = operation.variables || {};\n        const mockedResponseVariables = res.request.variables || {};\n        if (!isEqual(requestVariables, mockedResponseVariables)) {\n          return false;\n        }\n        responseIndex = index;\n        return true;\n      }\n    );\n\n    if (!response || typeof responseIndex === 'undefined') {\n      throw new Error(\n        `No more mocked responses for the query: ${print(\n          operation.query\n        )}, variables: ${JSON.stringify(operation.variables)}`\n      );\n    }\n    if (!response.keep) {\n      this.mockedResponsesByKey[key].splice(responseIndex, 1);\n    }\n\n    const { result, error, delay, newData } = response;\n\n    if (newData) {\n      response.result = newData();\n      this.mockedResponsesByKey[key].push(response);\n    }\n\n    if (!result && !error) {\n      throw new Error(\n        `Mocked response should contain either result or error: ${key}`\n      );\n    }\n\n    return new Observable<FetchResult>(observer => {\n      let timer = setTimeout(\n        () => {\n          if (error) {\n            observer.error(error);\n          } else {\n            if (result) observer.next(result);\n            observer.complete();\n          }\n        },\n        delay ? delay : 0\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n}\n\nexport class MockSubscriptionLink extends ApolloLink {\n  // private observer: Observer<any>;\n  public unsubscribers: any[] = [];\n  public setups: any[] = [];\n\n  private observer: any;\n\n  constructor() {\n    super();\n  }\n\n  public request(_req: any) {\n    return new Observable<FetchResult>(observer => {\n      this.setups.forEach(x => x());\n      this.observer = observer;\n      return () => {\n        this.unsubscribers.forEach(x => x());\n      };\n    });\n  }\n\n  public simulateResult(result: MockedSubscriptionResult) {\n    setTimeout(() => {\n      const { observer } = this;\n      if (!observer) throw new Error('subscription torn down');\n      if (result.result && observer.next) observer.next(result.result);\n      if (result.error && observer.error) observer.error(result.error);\n    }, result.delay || 0);\n  }\n\n  public onSetup(listener: any): void {\n    this.setups = this.setups.concat([listener]);\n  }\n\n  public onUnsubscribe(listener: any): void {\n    this.unsubscribers = this.unsubscribers.concat([listener]);\n  }\n}\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n\n  const requestKey = { query: queryString };\n\n  return JSON.stringify(requestKey);\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server\n// NOTE: The last arg can optionally be an `addTypename` arg\nexport function mockSingleLink(...mockedResponses: Array<any>): ApolloLink {\n  // to pull off the potential typename. If this isn't a boolean, we'll just set it true later\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n\nexport function mockObservableLink(): MockSubscriptionLink {\n  return new MockSubscriptionLink();\n}\n"],"names":["isEqual","require","MockLink","mockedResponses","addTypename","forEach","mockedResponse","addMockedResponse","key","requestToKey","request","mockedResponsesByKey","push","operation","responseIndex","response","find","res","index","requestVariables","variables","mockedResponseVariables","Error","print","query","JSON","stringify","keep","splice","result","error","delay","newData","Observable","observer","timer","setTimeout","next","complete","clearTimeout","ApolloLink","MockSubscriptionLink","_req","setups","x","unsubscribers","simulateResult","onSetup","listener","concat","onUnsubscribe","queryString","addTypenameToDocument","requestKey","mockSingleLink","maybeTypename","length","mocks","slice","mockObservableLink"],"mappings":"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"}