{"version":3,"file":"apollo-link-mock.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  Operation,\n  GraphQLRequest,\n  ApolloLink,\n  FetchResult,\n  Observable,\n  // Observer,\n} from 'apollo-link';\n\nimport { print } from 'graphql/language/printer';\nimport { addTypenameToDocument } from 'apollo-utilities';\nconst isEqual = require('lodash.isequal');\n\nexport interface MockedResponse {\n  request: GraphQLRequest;\n  result?: FetchResult;\n  error?: Error;\n  delay?: number;\n  newData?: () => FetchResult;\n  keep?: boolean;\n}\n\nexport interface MockedSubscriptionResult {\n  result?: FetchResult;\n  error?: Error;\n  delay?: number;\n}\n\nexport interface MockedSubscription {\n  request: GraphQLRequest;\n}\n\nexport class MockLink extends ApolloLink {\n  public addTypename: Boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse>,\n    addTypename: Boolean = true\n  ) {\n    super();\n    this.addTypename = addTypename;\n    if (mockedResponses)\n      mockedResponses.forEach(mockedResponse => {\n        this.addMockedResponse(mockedResponse);\n      });\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const key = requestToKey(mockedResponse.request, this.addTypename);\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(mockedResponse);\n  }\n\n  public request(operation: Operation) {\n    const key = requestToKey(operation, this.addTypename);\n    let responseIndex;\n    const response = (this.mockedResponsesByKey[key] || []).find(\n      (res, index) => {\n        const requestVariables = operation.variables || {};\n        const mockedResponseVariables = res.request.variables || {};\n        if (!isEqual(requestVariables, mockedResponseVariables)) {\n          return false;\n        }\n        responseIndex = index;\n        return true;\n      }\n    );\n\n    if (!response || typeof responseIndex === 'undefined') {\n      throw new Error(\n        `No more mocked responses for the query: ${print(\n          operation.query\n        )}, variables: ${JSON.stringify(operation.variables)}`\n      );\n    }\n    if (!response.keep) {\n      this.mockedResponsesByKey[key].splice(responseIndex, 1);\n    }\n\n    const { result, error, delay, newData } = response;\n\n    if (newData) {\n      response.result = newData();\n      this.mockedResponsesByKey[key].push(response);\n    }\n\n    if (!result && !error) {\n      throw new Error(\n        `Mocked response should contain either result or error: ${key}`\n      );\n    }\n\n    return new Observable<FetchResult>(observer => {\n      let timer = setTimeout(\n        () => {\n          if (error) {\n            observer.error(error);\n          } else {\n            if (result) observer.next(result);\n            observer.complete();\n          }\n        },\n        delay ? delay : 0\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n}\n\nexport class MockSubscriptionLink extends ApolloLink {\n  // private observer: Observer<any>;\n  public unsubscribers: any[] = [];\n  public setups: any[] = [];\n\n  private observer: any;\n\n  constructor() {\n    super();\n  }\n\n  public request(_req: any) {\n    return new Observable<FetchResult>(observer => {\n      this.setups.forEach(x => x());\n      this.observer = observer;\n      return () => {\n        this.unsubscribers.forEach(x => x());\n      };\n    });\n  }\n\n  public simulateResult(result: MockedSubscriptionResult) {\n    setTimeout(() => {\n      const { observer } = this;\n      if (!observer) throw new Error('subscription torn down');\n      if (result.result && observer.next) observer.next(result.result);\n      if (result.error && observer.error) observer.error(result.error);\n    }, result.delay || 0);\n  }\n\n  public onSetup(listener: any): void {\n    this.setups = this.setups.concat([listener]);\n  }\n\n  public onUnsubscribe(listener: any): void {\n    this.unsubscribers = this.unsubscribers.concat([listener]);\n  }\n}\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n\n  const requestKey = { query: queryString };\n\n  return JSON.stringify(requestKey);\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server\n// NOTE: The last arg can optionally be an `addTypename` arg\nexport function mockSingleLink(...mockedResponses: Array<any>): ApolloLink {\n  // to pull off the potential typename. If this isn't a boolean, we'll just set it true later\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n\nexport function mockObservableLink(): MockSubscriptionLink {\n  return new MockSubscriptionLink();\n}\n"],"names":["isEqual","require","MockLink","mockedResponses","addTypename","forEach","mockedResponse","addMockedResponse","key","requestToKey","request","this","mockedResponsesByKey","push","operation","responseIndex","response","find","res","index","variables","Error","print","query","JSON","stringify","keep","splice","result","error","delay","newData","Observable","observer","timer","setTimeout","next","complete","clearTimeout","ApolloLink","MockSubscriptionLink","_req","_this3","setups","x","unsubscribers","simulateResult","_this4","onSetup","listener","concat","onUnsubscribe","queryString","addTypenameToDocument","maybeTypename","length","mocks","slice"],"mappings":"6MAWA,IAAMA,EAAUC,QAAQ,kBAqBXC,EAAb,uBAKIC,EACAC,yBAAAA,IAAAA,GAAuB,uCALK,yBACsC,KAO7DA,YAAcA,EACfD,GACFA,EAAgBE,QAAQ,SAAAC,KACjBC,kBAAkBD,yCAItBC,kBAAA,SAAkBD,OACjBE,EAAMC,EAAaH,EAAeI,QAASC,KAAKP,aAClDD,EAAkBQ,KAAKC,qBAAqBJ,GAC3CL,SAEES,qBAAqBJ,GAD1BL,EAAkB,IAGpBA,EAAgBU,KAAKP,MAGhBI,QAAA,SAAQI,OAETC,EADEP,EAAMC,EAAaK,EAAWH,KAAKP,aAEnCY,GAAYL,KAAKC,qBAAqBJ,IAAQ,IAAIS,KACtD,SAACC,EAAKC,WAGCnB,EAFoBc,EAAUM,WAAa,GAChBF,EAAIR,QAAQU,WAAa,MAIzDL,EAAgBI,GACT,SAINH,QAAqC,IAAlBD,QAChB,IAAIM,iDACmCC,QACzCR,EAAUS,uBACKC,KAAKC,UAAUX,EAAUM,YAGzCJ,EAASU,WACPd,qBAAqBJ,GAAKmB,OAAOZ,EAAe,OAG/Ca,EAAkCZ,EAAlCY,OAAQC,EAA0Bb,EAA1Ba,MAAOC,EAAmBd,EAAnBc,MAAOC,EAAYf,EAAZe,WAE1BA,IACFf,EAASY,OAASG,SACbnB,qBAAqBJ,GAAKK,KAAKG,KAGjCY,IAAWC,QACR,IAAIR,gEACkDb,UAIvD,IAAIwB,aAAwB,SAAAC,OAC7BC,EAAQC,WACV,WACMN,EACFI,EAASJ,MAAMA,IAEXD,GAAQK,EAASG,KAAKR,GAC1BK,EAASI,aAGbP,GAAgB,UAGX,WACLQ,aAAaJ,SA/ErB,CAA8BK,cAqFjBC,EAAb,0EAEgC,YACP,uCAQhB9B,QAAA,SAAQ+B,qBACN,IAAIT,aAAwB,SAAAC,UACjCS,EAAKC,OAAOtC,QAAQ,SAAAuC,UAAKA,MACzBF,EAAKT,SAAWA,EACT,WACLS,EAAKG,cAAcxC,QAAQ,SAAAuC,UAAKA,YAK/BE,eAAA,SAAelB,cACpBO,WAAW,eACDF,EAAac,EAAbd,aACHA,EAAU,MAAM,IAAIZ,MAAM,0BAC3BO,EAAOA,QAAUK,EAASG,MAAMH,EAASG,KAAKR,EAAOA,QACrDA,EAAOC,OAASI,EAASJ,OAAOI,EAASJ,MAAMD,EAAOC,QACzDD,EAAOE,OAAS,MAGdkB,QAAA,SAAQC,QACRN,OAAShC,KAAKgC,OAAOO,OAAO,CAACD,OAG7BE,cAAA,SAAcF,QACdJ,cAAgBlC,KAAKkC,cAAcK,OAAO,CAACD,OAnCpD,CAA0CV,cAuC1C,SAAS9B,EAAaC,EAAyBN,OACvCgD,EACJ1C,EAAQa,OACRD,QAAMlB,EAAciD,wBAAsB3C,EAAQa,OAASb,EAAQa,cAI9DC,KAAKC,UAFO,CAAEF,MAAO6B,iFAqB9B,kBACS,IAAIZ,0BAdb,sCAAkCrC,2BAAAA,sBAE5BmD,EAAgBnD,EAAgBA,EAAgBoD,OAAS,GACzDC,EAAQrD,EAAgBsD,MAAM,EAAGtD,EAAgBoD,OAAS,SAEjC,kBAAlBD,IACTE,EAAQrD,EACRmD,GAAgB,GAGX,IAAIpD,EAASsD,EAAOF"}